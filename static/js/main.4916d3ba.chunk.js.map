{"version":3,"sources":["components/fiche/fiche.component.jsx","components/fiche-list/fiche-list.component.jsx","components/zoneRecherche/zone-recherche.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Fiche","props","className","src","monstre","id","alt","name","email","FicheList","monstres","map","key","ZoneRecherche","placeholder","gererChangement","type","onChange","App","e","setState","champsRecherche","target","value","state","fetch","then","reponse","json","users","this","monstresFiltre","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uTAGaA,G,MAAQ,SAACC,GAAD,OACjB,yBAAKC,UAAU,mBACX,yBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,4BAAKL,EAAMG,QAAQG,MACnB,2BAAIN,EAAMG,QAAQI,UCFbC,G,MAAY,SAAAR,GAErB,OAAO,yBAAKC,UAAU,cAAf,IACHD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACtB,kBAAC,EAAD,CAAOQ,IAAMR,EAAQC,GAAKD,QAASA,UCHlCS,G,MAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,gBAAhB,OACzB,2BACIb,UAAY,YACZc,KAAK,SAASF,YAAaA,EAC3BG,SAAUF,MCiCHG,G,wDArCX,aAAe,IAAD,8BACV,gBAQJH,gBAAkB,SAACI,GACnB,EAAKC,SAAS,CAAEC,gBAAiBF,EAAEG,OAAOC,SAPtC,EAAKC,MAAQ,CACTd,SAAU,GACVW,gBAAiB,IALX,E,gEAaO,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEV,SAAUmB,S,+BAEvC,IAAD,EACiCC,KAAKN,MAAnCd,EADH,EACGA,SAAUW,EADb,EACaA,gBACRU,EAAiBrB,EAASsB,QAAO,SAAA5B,GAAO,OAC1CA,EAAQG,KAAK0B,cAAcC,SAASb,EAAgBY,kBAE5D,OACI,yBAAK/B,UAAU,OACX,kDACA,kBAAC,EAAD,CACIY,YAAY,mBACZC,gBAAiBe,KAAKf,kBAE1B,kBAAC,EAAD,CAAWL,SAAUqB,S,GA/BnBI,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4916d3ba.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './fiche.styles.css'\r\n\r\nexport const Fiche = (props) => (\r\n    <div className=\"fiche-container\">\r\n        <img src={`https://robohash.org/${props.monstre.id}?set=set3&size=180x180`} alt=\"monstre\"/>\r\n        <h2>{props.monstre.name}</h2>\r\n        <p>{props.monstre.email}</p>\r\n    </div>\r\n)","import React from \"react\";\r\nimport { Fiche } from \"../fiche/fiche.component\";\r\n\r\nimport './fiche-list-styles.css'\r\n\r\nexport const FicheList = props => {\r\n\r\n    return <div className='fiche-list'> {\r\n        props.monstres.map(monstre => (\r\n            <Fiche key={ monstre.id } monstre={monstre}/>\r\n\r\n        ))\r\n    }\r\n    </div>\r\n}","import React from 'react'\r\n\r\nimport './zone-recherche.styles.css'\r\n\r\n\r\n\r\nexport const ZoneRecherche = ({ placeholder, gererChangement }) => (\r\n    <input\r\n        className = \"recherche\"\r\n        type=\"search\" placeholder={placeholder}\r\n        onChange={gererChangement}\r\n    />\r\n)","import React, { Component } from 'react';\nimport { FicheList } from \"./components/fiche-list/fiche-list.component\";\nimport { ZoneRecherche } from \"./components/zoneRecherche/zone-recherche.component\";\nimport './App.css';\n\nclass App extends Component {\n    constructor() {\n        super()\n\n        this.state = {\n            monstres: [],\n            champsRecherche: ''\n        }\n\n    }\n    gererChangement = (e) => {\n    this.setState({ champsRecherche: e.target.value })\n}\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(reponse => reponse.json())\n            .then(users => this.setState({ monstres: users}))\n    }\n    render() {\n        const { monstres, champsRecherche } = this.state\n            const monstresFiltre = monstres.filter(monstre =>\n                monstre.name.toLowerCase().includes(champsRecherche.toLowerCase())\n        )\n        return (\n            <div className=\"App\">\n                <h1>Monstres carrousel</h1>\n                <ZoneRecherche\n                    placeholder=\"Cherche monstres\"\n                    gererChangement={this.gererChangement}\n                />\n                <FicheList monstres={monstresFiltre}/>\n            </div>\n\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}